%% Compare theta power at within vs between cluster trantisions

clear
clc

addpath(genpath('/Users/stiso/Documents/MATLAB/IRASA/'))
addpath(('/Users/stiso/Documents/MATLAB/fieldtrip-20170830/'))
addpath(genpath('/Users/stiso/Documents/Code/graph_learning/functions/'))

% define variables
subjs = [{'2'}, {'4'}, {'6'}, {'10'}];
feature = 'pow'; % pow or lfp
for subj_idx = 1:numel(subjs)
    clear D_perm
    subj = subjs{subj_idx};
    save_dir = '/Users/stiso/Documents/Code/graph_learning/ECoG_data/ephys_raw/';
    r_dir = '/Users/stiso/Documents/Code/graph_learning/ECoG_data/ephys_analysis/';
    img_dir = ['/Users/stiso/Documents/Code/graph_learning/ECoG_data/ephys_img/subj', subj];
    
    % make diractories
    if ~exist(img_dir, 'dir')
        mkdir(img_dir);
    end
    
    % load stuff
    load([save_dir, subj, '/ft_data.mat'])
    load([save_dir, subj, '/header_clean.mat'], 'elec_labels', 'srate', 'HUP_ID', 'subj')
    load([save_dir, subj, '/good_events.mat']) % in samples
    
    load([save_dir, subj, '/task_data.mat'])
    load([r_dir, 'subj', subj, '/theta_peaks.mat'])
    
    % analysis varaibles
    nElec = size(ft_data.trial{1},1);
    hg = [70:150];
    nNode = numel(unique(walk));
    tri_mask = logical(triu(ones(nNode),1));

    % timing varaibles
    exp_st = good_events(1);
    exp_en = good_events(end);
    
    % benchmarks
    
    A = [0 1 1 1 0 0 0 0 0 1;
        1 0 1 1 1 0 0 0 0 0;
        1 1 0 1 1 0 0 0 0 0;
        1 1 1 0 1 0 0 0 0 0;
        0 1 1 1 0 1 0 0 0 0;
        0 0 0 0 1 0 1 1 1 0;
        0 0 0 0 0 1 0 1 1 1;
        0 0 0 0 0 1 1 0 1 1;
        0 0 0 0 0 1 1 1 0 1;
        1 0 0 0 0 0 1 1 1 0];
    G = expm(A);
    % load A_hat
    load('/Users/stiso/Documents/Code/graph_learning/ECoG_data/behavior_preprocessed/max_ent.mat', 'A_hat')
    A_hat = squeeze(A_hat(subj_idx,:,:));
    
    
    %% Field trip format
    
    % some useful variables
    min_dur = min(good_events(:,2) - good_events(:,1));
    good_walk = walk(good_trials) + 1; % sswitch to matlab indexing
    
    % prewhiten
    cfg = [];
    cfg.derivative = 'yes';
    ft_data = ft_preprocessing(cfg, ft_data);
    nTrial = numel(ft_data.trial);
    
    % get frequency bany feats
    cfg = [];
    cfg.method = 'mtmfft';
    cfg.channel = elec_labels;
    cfg.taper = 'dpss';
    cfg.ouput = 'pow';
    cfg.pad = 'nextpow2';
    cfg.foi = hg; % this includes two notch filtered freqs within the band!!
    cfg.keeptrials = 'yes';
    cfg.tapsmofrq = 4; %smoothing index - check if same effect is present for others
    
    pow = ft_freqanalysis(cfg,ft_data);
    ft_hg = squeeze(mean(log10(pow.powspctrm),3));
    
    cfg = [];
    cfg.method = 'mtmfft'; % only single taper for low freqs
    cfg.channel = elec_labels;
    cfg.taper = 'hanning';
    cfg.ouput = 'pow';
    cfg.pad = 'nextpow2';
    cfg.foi = unique(round(peaks));
    cfg.keeptrials = 'yes';
    
    pow = ft_freqanalysis(cfg,ft_data);
    ft_theta = zeros(size(ft_hg));
    for i = 1:nElec
        curr_peak = round(peaks(i));
        peak_idx = find(curr_peak == pow.freq');
        ft_theta(:,i) = squeeze(log10(pow.powspctrm(:,i,peak_idx)));
    end
    ft_spec = [ft_theta, ft_hg];
    
    % cut to same number of timepoints
    cfg = [];
    cfg.trl = [good_events(:,1), good_events(:,1) + min_dur, zeros(size(good_events,1),1)];
    % if multiple sessions, add that
    if isfield(ft_data, 'trialinfo')
        cfg.trl = [cfg.trl, ft_data.trialinfo];
    end
    ft_data = ft_redefinetrial(cfg,ft_data);
    % reshape into Trial x (timepoint*elec)
    feats = zeros(nTrial, numel(ft_data.trial{1}));
    for i = 1:nTrial
        feats(i,:) = reshape(ft_data.trial{i},1,[]);
    end
    
    %% get CV normalized euclidean distance
    % same as Mahalanobis Distance
    
    D = zeros(nNode);
    N = zeros(nNode);
    % leave one out cv
    k = nTrial;
    
    for i = 1:k
        
        % split
        train = true(nTrial,1);
        train(i) = false;
        test = ~train;
        
        % get dist
        [d,m] = get_rdm(feats, train, test, good_walk, nNode);
        D = D + d;
        N = N + m;
    end
    D = D./N;
    D(logical(eye(nNode))) = 0;
    
    % average dist
    figure(1); clf
    imagesc(D); colorbar
    
    %% MDS
    
    [Y, stress] = cmdscale(D,2);
    
    trans1 = [253,224,239]./255;
    trans2 = [230,245,208]./255;
    within1 = [233,163,201]./255;
    within2 = [161,215,106]./255;
    center1 = [197,27,125]./255;
    center2 = [77,146,33]./255;
    colors = [trans1; within1; center1; within1; trans1; trans2; within2; center2; within2; trans2];
    
    figure(1); clf
    scatter(Y(:,1), Y(:,2), 10000, colors, '.', 'MarkerFaceAlpha', 0.4)
    saveas(gca, [img_dir, '/MDS_', feaute, '.png'], 'png')
    
    % correlations
    G_corr = corr(reshape(G(tri_mask),[],1), reshape(D(tri_mask),[],1));
    A_corr = corr(reshape(A(tri_mask),[],1), reshape(D(tri_mask),[],1));
    A_hat_corr = corr(reshape(A_hat(tri_mask),[],1), reshape(D(tri_mask),[],1));
    
    %% Null Models
    
    % permutation
    nPerm = 100;
    D_perm = zeros(nNode, nNode, nPerm);
    for n = 1:nPerm
        fprintf('\nPerm %d', n);
        % count the number of times you see each transition
        N = zeros(nNode);
        r = randi([2,nTrial-1]);
        perm_walk = [good_walk(r:end), good_walk(1:(r-1))];
        % leave one out cv
        k = nTrial;
        for i = 1:k
            % split
            train = true(nTrial,1);
            train(i) = false;
            test = ~train;
            
            % get dist
            [d,m] = get_rdm(feats, train, test, perm_walk, nNode);
            D_perm(:,:,n) = D_perm(:,:,n) + d;
            N = N + m;
        end
        D_perm(:,:,n) = D_perm(:,:,n)./N;
        figure(1); clf;
        imagesc(D_perm(:,:,n))
    end
    % D_perm(logical(eye(nNode))) = 0;
    
    % correlations
    G_corr_perm = zeros(nPerm,1);
    A_corr_perm = zeros(nPerm,1);
    hat_corr_perm = zeros(nPerm,1);
    
    for n = 1:nPerm
        curr = D_perm(:,:,n);
        curr(logical(eye(nNode))) = 0;
        G_corr_perm(n) = corr(reshape(G(tri_mask),[],1), reshape(curr(tri_mask),[],1));
        A_corr_perm(n) = corr(reshape(A(tri_mask),[],1), reshape(curr(tri_mask),[],1));
        hat_corr_perm(n) = corr(reshape(A_hat(tri_mask),[],1), reshape(curr(tri_mask),[],1));% space
    end
    
    figure(1); clf
    histogram(G_corr_perm, 'Normalization', 'probability', 'FaceColor',rgb('steelblue'),'EdgeColor','white','facealpha', 0.8); hold on
    plot([G_corr, G_corr], [0, .3], 'red', 'linewidth', 3)
    title('Communicability')
    saveas(gca, [img_dir, '/G_rsa_', feature, '.png'], 'png')
    
    figure(2); clf
    histogram(A_corr_perm, 'Normalization', 'probability', 'FaceColor',rgb('steelblue'),'EdgeColor','white','facealpha', 0.8); hold on
    plot([A_corr, A_corr], [0, .3], 'red', 'linewidth', 3)
    title('A')
    saveas(gca, [img_dir, '/A_rsa_', feature, '.png'], 'png')
    
    figure(3); clf
    histogram(hat_corr_perm, 'Normalization', 'probability', 'FaceColor',rgb('steelblue'),'EdgeColor','white','facealpha', 0.8); hold on
    plot([A_hat_corr, A_hat_corr], [0, .3], 'red', 'linewidth', 3)
    title('Communicability')
    saveas(gca, [img_dir, '/A_hat_rsa_', feature, '.png'], 'png')
    
end